name: develop

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'package.json'
      - 'package-lock.json'
jobs:

  build:

    # if: " ! contains(github.event.head_commit.message, '/skipbuild/') "

    runs-on: ubuntu-latest

    steps:

    # How to create a TOKEN_ACTION
    # 1. Create a personal access token called GITHUB_TOKEN_ACTION with admin repo access
    # 2. Copy generated key
    # 3. In your repo create a secret key call TOKEN_ACTION
    # 4. Paste the GITHUB_TOKEN_ACTION key
    - uses: actions/checkout@v2
      with:
        token: ${{ secrets.TOKEN_ACTION }}

    - name: Setup GIT
      run: |
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
        git config user.name "$GITHUB_ACTOR"

    - id: log
      run: echo "::set-output name=message::$(git log --no-merges -1 --oneline)"

    - name: Bump Major Version
      if: " ! contains(steps.log.outputs.message, '/skipbuild/') && contains(steps.log.outputs.message, '/bump:major/') "
      env:
        GITHUB_TOKEN: ${{secrets.TOKEN_ACTION}}
      run: |
        npm version major -m "Bump version %s"
        git push

    - name: Bump Minor Version
      if: " ! contains(steps.log.outputs.message, '/skipbuild/') && ! contains(steps.log.outputs.message, '/bump:major/') && ! contains(steps.log.outputs.message, '/bump:patch/') "
      env:
        GITHUB_TOKEN: ${{secrets.TOKEN_ACTION}}
      run: |
        npm version minor -m "Bump version %s"
        git push

    - name: Bump Patch Version
      if: " ! contains(steps.log.outputs.message, '/skipbuild/') && contains(steps.log.outputs.message, '/bump:patch/') "
      env:
        GITHUB_TOKEN: ${{secrets.TOKEN_ACTION}}
      run: |
        npm version patch -m "Bump version %s"
        git push

    - name: Get version number
      run: |
        export APP_VERSION=$(node app-version.js)
        echo $APP_VERSION

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     AWS_REGION: eu-west-1

    # - name: Build, tag, and push image to Amazon ECR
    #   env:
    #     ECR_REGISTRY: xyz.amazonaws.com
    #     ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
    #     IMAGE_TAG: latest
    #   run: |
    #     export APP_VERSION=$(node app-version.js)
    #     export COMMIT_SHA8=$(git rev-parse --short HEAD)
    #     docker build \
    #     -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
    #     -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG.$APP_VERSION \
    #     -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG.sha.$COMMIT_SHA8 \
    #     .
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY.$APP_VERSION
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG.sha.$COMMIT_SHA8

    # - name: Logout of Amazon ECR
    #   if: always()
    #   run: docker logout ${{ steps.login-ecr.outputs.registry }}
